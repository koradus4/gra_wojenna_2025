"""
Funkcje czyszczƒÖce dla nowej gry
"""
import os
import shutil
from pathlib import Path


def clean_strategic_orders():
    """Usu≈Ñ stare rozkazy strategiczne"""
    try:
        orders_file = Path("data/strategic_orders.json")
        if orders_file.exists():
            orders_file.unlink()
            print("‚úÖ Usuniƒôto stare rozkazy strategiczne")
        else:
            print("‚ÑπÔ∏è Brak starych rozkaz√≥w strategicznych")
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd usuwania rozkaz√≥w: {e}")


def clean_purchased_tokens():
    """Usu≈Ñ wszystkie zakupione ≈ºetony z poprzedniej gry"""
    try:
        tokens_dir = Path("assets/tokens")
        deleted_count = 0
        
        # Usu≈Ñ foldery nowe_dla_X
        for folder in tokens_dir.glob("nowe_dla_*"):
            if folder.is_dir():
                shutil.rmtree(folder)
                deleted_count += 1
                print(f"‚úÖ Usuniƒôto folder: {folder.name}")
        
        if deleted_count > 0:
            print(f"‚úÖ Usuniƒôto {deleted_count} folder√≥w z zakupionymi ≈ºetonami")
        else:
            print("‚ÑπÔ∏è Brak zakupionych ≈ºeton√≥w do usuniƒôcia")
            
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd usuwania ≈ºeton√≥w: {e}")


def clean_ai_logs():
    """Usu≈Ñ logi AI z poprzedniej gry"""
    try:
        logs_dir = Path("logs")
        deleted_count = 0
        
        # Usu≈Ñ pliki AI
        for log_file in logs_dir.glob("ai_*.csv"):
            log_file.unlink()
            deleted_count += 1
            print(f"‚úÖ Usuniƒôto log AI: {log_file.name}")
        
        # Usu≈Ñ foldery AI
        for ai_folder in ["ai_commander", "ai_general"]:
            ai_path = logs_dir / ai_folder
            if ai_path.exists() and ai_path.is_dir():
                shutil.rmtree(ai_path)
                deleted_count += 1
                print(f"‚úÖ Usuniƒôto folder log√≥w: {ai_folder}")
        
        if deleted_count > 0:
            print(f"‚úÖ Usuniƒôto {deleted_count} plik√≥w/folder√≥w log√≥w AI")
        else:
            print("‚ÑπÔ∏è Brak log√≥w AI do usuniƒôcia")
            
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd usuwania log√≥w AI: {e}")


def clean_game_logs():
    """Usu≈Ñ logi akcji gracza z poprzedniej gry"""
    try:
        logs_dir = Path("logs")
        deleted_count = 0
        
        # Usu≈Ñ pliki actions_*.csv
        for log_file in logs_dir.glob("actions_*.csv"):
            log_file.unlink()
            deleted_count += 1
            print(f"‚úÖ Usuniƒôto log akcji: {log_file.name}")
        
        if deleted_count > 0:
            print(f"‚úÖ Usuniƒôto {deleted_count} log√≥w akcji gracza")
        else:
            print("‚ÑπÔ∏è Brak log√≥w akcji do usuniƒôcia")
            
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd usuwania log√≥w akcji: {e}")


def clean_all_for_new_game():
    """Kompletne czyszczenie dla nowej gry"""
    print("üßπ CZYSZCZENIE DANYCH Z POPRZEDNIEJ GRY...")
    print("=" * 50)
    
    clean_strategic_orders()
    clean_purchased_tokens()
    clean_ai_logs()
    clean_game_logs()
    
    print("=" * 50)
    print("‚úÖ CZYSZCZENIE ZAKO≈ÉCZONE - GOTOWY NA NOWƒÑ GRƒò!")
    print("")


def quick_clean():
    """Szybkie czyszczenie tylko najwa≈ºniejszych rzeczy"""
    print("üßπ SZYBKIE CZYSZCZENIE...")
    print("-" * 30)
    
    clean_strategic_orders()
    clean_purchased_tokens()
    
    print("-" * 30)
    print("‚úÖ SZYBKIE CZYSZCZENIE ZAKO≈ÉCZONE!")
    print("")


if __name__ == "__main__":
    # Test czyszczenia
    clean_all_for_new_game()
