"""
Test sprawdzajƒÖcy czy dow√≥dca mo≈ºe kupiƒá jednostkƒô przez TokenShop
"""
import sys
import os
import tempfile
import shutil
from pathlib import Path

# Dodaj ≈õcie≈ºkƒô do g≈Ç√≥wnego katalogu projektu
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

import pytest
from core.ekonomia import EconomySystem
from engine.player import Player
from gui.token_shop import TokenShop
import tkinter as tk

def test_dowodca_moze_kupic_jednostke():
    """Test czy dow√≥dca mo≈ºe kupiƒá jednostkƒô u≈ºywajƒÖc TokenShop"""
    
    # Przygotowanie gracza-dow√≥dcy z punktami ekonomicznymi
    dowodca = Player(2, "Polska", "Dow√≥dca", 5)
    dowodca.economy = EconomySystem()
    dowodca.economy.economic_points = 50  # Daj dow√≥dcy 50 punkt√≥w
    dowodca.punkty_ekonomiczne = 50
    
    print(f"Stan poczƒÖtkowy dow√≥dcy: {dowodca.economy.economic_points} punkt√≥w ekonomicznych")
    
    # Lista dow√≥dc√≥w (w prawdziwej grze by≈Çoby wiƒôcej)
    dowodcy = [dowodca]
    
    # Symulacja zakupu przez TokenShop
    # Nie mo≈ºemy testowaƒá GUI bezpo≈õrednio, ale mo≈ºemy przetestowaƒá logikƒô kupna
    
    # Dane jednostki do kupienia (jak z TokenShop)
    unit_data = {
        "nation": "Polska",
        "unit_type": "P",  # Piechota
        "unit_size": "Pluton",
        "commander_id": "2",
        "supports": [],
        "cost": 15  # Koszt piechoty pluton (z unit_factory)
    }
    
    print(f"Pr√≥ba zakupu: {unit_data['unit_type']} {unit_data['unit_size']} za {unit_data['cost']} punkt√≥w")
    
    # Sprawd≈∫ czy dow√≥dca ma wystarczajƒÖco punkt√≥w
    starting_points = dowodca.economy.economic_points
    cost = unit_data["cost"]
    
    assert starting_points >= cost, f"Dow√≥dca nie ma wystarczajƒÖcych punkt√≥w: {starting_points} < {cost}"
    
    # Symuluj zakup (jak w TokenShop.buy_unit())
    if starting_points >= cost:
        # Odejmij punkty
        dowodca.economy.subtract_points(cost)
        remaining_points = dowodca.economy.get_points()['economic_points']
        
        print(f"Po zakupie: {remaining_points} punkt√≥w pozosta≈Ço")
        
        # Sprawd≈∫ czy punkty zosta≈Çy poprawnie odjƒôte
        assert remaining_points == starting_points - cost
        assert remaining_points == 35  # 50 - 15 = 35
        
        # Sprawd≈∫ czy folder dla ≈ºetonu zosta≈Çby utworzony
        # (w prawdziwym TokenShop tworzy siƒô folder assets/tokens/nowe_dla_{dowodca_id})
        expected_folder = Path("assets/tokens") / f"nowe_dla_{unit_data['commander_id']}"
        
        print(f"Sprawdzam czy mo≈ºna utworzyƒá folder: {expected_folder}")
        
        # Test tworzenia folderu (bez rzeczywistego tworzenia w te≈õcie)
        try:
            expected_folder.parent.mkdir(parents=True, exist_ok=True)
            folder_can_be_created = True
        except Exception as e:
            folder_can_be_created = False
            print(f"B≈ÇƒÖd tworzenia folderu: {e}")
        
        assert folder_can_be_created, "Nie mo≈ºna utworzyƒá folderu dla nowego ≈ºetonu"
        
        print("‚úÖ Dow√≥dca pomy≈õlnie kupi≈Ç jednostkƒô!")
        return True
    else:
        print("‚ùå Dow√≥dca nie ma wystarczajƒÖcych punkt√≥w")
        return False

def test_dowodca_nie_moze_kupic_za_drogie_jednostki():
    """Test czy dow√≥dca nie mo≈ºe kupiƒá jednostki za drogie"""
    
    # Dow√≥dca z ma≈ÇƒÖ ilo≈õciƒÖ punkt√≥w
    dowodca = Player(3, "Polska", "Dow√≥dca", 5)
    dowodca.economy = EconomySystem()
    dowodca.economy.economic_points = 5  # Tylko 5 punkt√≥w
    
    print(f"Stan poczƒÖtkowy dow√≥dcy: {dowodca.economy.economic_points} punkt√≥w ekonomicznych")
    
    # Pr√≥ba zakupu drogiej jednostki
    expensive_unit = {
        "unit_type": "TC",  # Czo≈Çg ciƒô≈ºki
        "unit_size": "Batalion",
        "cost": 50  # Droga jednostka
    }
    
    print(f"Pr√≥ba zakupu drogiej jednostki za {expensive_unit['cost']} punkt√≥w")
    
    starting_points = dowodca.economy.economic_points
    cost = expensive_unit["cost"]
    
    # Sprawd≈∫ czy dow√≥dca NIE ma wystarczajƒÖcych punkt√≥w
    assert starting_points < cost, f"Test niepoprawny - dow√≥dca ma za du≈ºo punkt√≥w: {starting_points} >= {cost}"
    
    # Sprawd≈∫ czy zakup zostanie odrzucony
    if starting_points < cost:
        print("‚úÖ Zakup odrzucony - dow√≥dca nie ma wystarczajƒÖcych punkt√≥w")
        
        # Punkty nie powinny zostaƒá odjƒôte
        remaining_points = dowodca.economy.get_points()['economic_points']
        assert remaining_points == starting_points
        
        return False
    else:
        pytest.fail("Dow√≥dca nie powinien m√≥c kupiƒá tak drogiej jednostki")

def test_rozne_typy_jednostek():
    """Test zakupu r√≥≈ºnych typ√≥w jednostek"""
    
    dowodca = Player(2, "Polska", "Dow√≥dca", 5)
    dowodca.economy = EconomySystem()
    dowodca.economy.economic_points = 100  # Du≈ºo punkt√≥w na testy
    
    # Lista jednostek do przetestowania (z poprawionymi zakresami koszt√≥w)
    units_to_test = [
        {"type": "P", "size": "Pluton", "expected_cost_range": (10, 20)},
        {"type": "K", "size": "Kompania", "expected_cost_range": (30, 50)},  # Kawaleria dro≈ºsza
        {"type": "TL", "size": "Pluton", "expected_cost_range": (20, 40)},
        {"type": "Z", "size": "Kompania", "expected_cost_range": (15, 35)},
    ]
    
    successful_purchases = 0
    starting_points = dowodca.economy.economic_points
    
    for unit in units_to_test:
        print(f"\nTest zakupu: {unit['type']} {unit['size']}")
        
        # Import rzeczywistej logiki z unit_factory
        try:
            from core.unit_factory import compute_unit_stats
            stats = compute_unit_stats(unit["type"], unit["size"], [])
            actual_cost = stats.price
            
            print(f"Rzeczywisty koszt: {actual_cost} punkt√≥w")
            
            # Sprawd≈∫ czy koszt mie≈õci siƒô w oczekiwanym zakresie
            min_cost, max_cost = unit["expected_cost_range"]
            assert min_cost <= actual_cost <= max_cost, f"Koszt {actual_cost} poza zakresem {min_cost}-{max_cost}"
            
            # Sprawd≈∫ czy dow√≥dca mo≈ºe kupiƒá
            current_points = dowodca.economy.get_points()['economic_points']
            if current_points >= actual_cost:
                dowodca.economy.subtract_points(actual_cost)
                successful_purchases += 1
                print(f"‚úÖ Zakupiono za {actual_cost} punkt√≥w")
            else:
                print(f"‚ùå Za ma≈Ço punkt√≥w: {current_points} < {actual_cost}")
                
        except ImportError:
            print(f"‚ö†Ô∏è Nie mo≈ºna zaimportowaƒá unit_factory, pomijam test {unit['type']}")
    
    print(f"\nPodsumowanie: {successful_purchases}/{len(units_to_test)} udanych zakup√≥w")
    final_points = dowodca.economy.get_points()['economic_points']
    spent_points = starting_points - final_points
    
    print(f"Wydano ≈ÇƒÖcznie: {spent_points} punkt√≥w")
    print(f"Pozosta≈Ço: {final_points} punkt√≥w")
    
    assert successful_purchases > 0, "Dow√≥dca nie m√≥g≈Ç kupiƒá ≈ºadnej jednostki"
    assert spent_points > 0, "Nie wydano ≈ºadnych punkt√≥w"

if __name__ == "__main__":
    print("üß™ TESTY ZAKUP√ìW DOW√ìDCY")
    print("=" * 50)
    
    try:
        print("\n1. Test podstawowego zakupu:")
        test_dowodca_moze_kupic_jednostke()
        
        print("\n2. Test odrzucenia drogiego zakupu:")
        test_dowodca_nie_moze_kupic_za_drogie_jednostki()
        
        print("\n3. Test r√≥≈ºnych typ√≥w jednostek:")
        test_rozne_typy_jednostek()
        
        print("\nüéâ WSZYSTKIE TESTY PRZESZ≈ÅY!")
        print("‚úÖ Dow√≥dca mo≈ºe kupowaƒá jednostki przez TokenShop")
        
    except Exception as e:
        print(f"\n‚ùå TEST NIEUDANY: {e}")
        import traceback
        traceback.print_exc()
