#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Minimalny push backup do repo u≈ºytkownika + tryb automatycznego monitorowania.

Funkcje podstawowe:
- Wykrywa aktualnƒÖ ga≈ÇƒÖ≈∫ (lub pozwala wymusiƒá --branch/-b)
- Pomija push je≈õli brak zmian (czysty working tree i ostatni commit <=60s temu)
- Waliduje czy remote 'origin' wskazuje na docelowe repo (opcjonalny ENV EXPECT_REMOTE_SUBSTR)
- Czytelny log

NOWE (watch mode):
- Parametr --watch uruchamia pƒôtlƒô cyklicznie sprawdzajƒÖcƒÖ repo
- Parametr --interval (sekundy) odstƒôp miƒôdzy pr√≥bami (domy≈õlnie 120)
- Parametr --min-gap minimalny odstƒôp czasowy miƒôdzy kolejnymi pushami (domy≈õlnie 60)
- Debounce: je≈ºeli wykryto zmiany, ale proces edycji trwa (wykrywane kolejnymi r√≥≈ºnymi hashami statusu) ‚Äì czeka a≈º status siƒô ustabilizuje przez jeden cykl
- Automatyczny inkrementalny commit message je≈õli brak -m (Auto backup + timestamp)
- Retry push (3 pr√≥by) przy chwilowych b≈Çƒôdach sieci (--retry / --retry-delay)

Przyk≈Çady:
    python backup/backup_push_github.py                      # jednorazowy push
    python backup/backup_push_github.py -m "Fix ruch"        # w≈Çasny komunikat
    python backup/backup_push_github.py -b main              # wymuszenie ga≈Çƒôzi
    python backup/backup_push_github.py --watch              # ciƒÖg≈Çe monitorowanie
    python backup/backup_push_github.py --watch --interval 30 --min-gap 90
"""
import subprocess, sys, datetime, os, time, argparse, shlex, hashlib, traceback
from pathlib import Path

def sh(cmd: str, check=True, capture=True):
    return subprocess.run(cmd, shell=True, text=True,
                          capture_output=capture, check=False)

def run_or_die(cmd: str):
    r = sh(cmd)
    if r.returncode != 0:
        print(f"‚ùå {cmd}\n{r.stderr.strip()}")
        sys.exit(1)
    out = (r.stdout or '').strip()
    if out:
        print(out)
    return out

def detect_branch():
    r = sh('git rev-parse --abbrev-ref HEAD')
    if r.returncode == 0:
        b = (r.stdout or '').strip()
        if b:
            return b
    return 'main'

def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument('-b','--branch', help='Ga≈ÇƒÖ≈∫ do push (domy≈õlnie aktualna)')
    ap.add_argument('-m','--message', help='W≈Çasny komunikat commita')
    ap.add_argument('--force', action='store_true', help='Wymu≈õ push (git push --force-with-lease)')
    ap.add_argument('--watch', action='store_true', help='Tryb ciƒÖg≈Çego monitorowania i automatycznych pushy')
    ap.add_argument('--interval', type=int, default=120, help='Odstƒôp (s) miƒôdzy sprawdzeniami w trybie watch (default: 120)')
    ap.add_argument('--min-gap', type=int, default=60, help='Minimalny odstƒôp (s) miƒôdzy kolejnymi pushami (default: 60)')
    ap.add_argument('--retry', type=int, default=3, help='Liczba pr√≥b push przy b≈Çƒôdach sieci (default: 3)')
    ap.add_argument('--retry-delay', type=int, default=5, help='Odstƒôp (s) miƒôdzy retry push (default: 5)')
    return ap.parse_args()

def working_tree_dirty():
    r = sh('git status --porcelain')
    if r.returncode != 0:
        return True
    return bool(r.stdout.strip())

def last_commit_age_seconds():
    r = sh('git log -1 --format=%ct')
    if r.returncode != 0 or not r.stdout.strip():
        return 9999
    try:
        ts = int(r.stdout.strip())
        return time.time() - ts
    except ValueError:
        return 9999

def do_single_push(args, min_age_override=None):
    """Wykonuje pojedynczy cykl commit + push je≈õli sƒÖ zmiany lub ostatni commit stary.

    Zwraca:
      (pushed: bool, reason: str)
    """
    branch = args.branch or detect_branch()
    dirty = working_tree_dirty()
    age = last_commit_age_seconds()
    min_gap = args.min_gap if min_age_override is None else min_age_override
    if not dirty and age < min_gap:
        return False, f"Brak zmian i ostatni commit {age:.0f}s temu (<{min_gap}s)"

    auto_msg = f"Auto backup {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    commit_msg = args.message or auto_msg
    print(f"‚û°Ô∏è Ga≈ÇƒÖ≈∫: {branch}")
    if dirty:
        print("‚û°Ô∏è Dodajƒô zmiany (git add -A)...")
        run_or_die('git add -A')
        print(f"‚û°Ô∏è Tworzƒô commit: {commit_msg}")
        sh(f'git commit -m {shlex.quote(commit_msg)}')  # commit mo≈ºe byƒá pusty je≈õli kto≈õ w miƒôdzyczasie doda≈Ç commit
    else:
        print("‚ÑπÔ∏è Czysto ‚Äì u≈ºywam istniejƒÖcego commita do push (tylko push).")

    cmd_push = f'git push origin {branch}' + (' --force-with-lease' if args.force else '')
    print(f"‚û°Ô∏è Push: {cmd_push}")
    # Retry mechanizm
    for attempt in range(1, args.retry + 1):
        r = sh(cmd_push)
        if r.returncode == 0:
            print("‚úÖ Push OK")
            return True, 'pushed'
        print(f"‚ö†Ô∏è Push nieudany (pr√≥ba {attempt}/{args.retry}): {r.stderr.strip().splitlines()[-1] if r.stderr else 'brak stderr'}")
        if attempt < args.retry:
            time.sleep(args.retry_delay)
    print("‚ùå Nie uda≈Ço siƒô wypchnƒÖƒá po wszystkich pr√≥bach")
    return False, 'push_failed'


def compute_status_hash():
    r = sh('git status --porcelain')
    return hashlib.sha256((r.stdout or '').encode('utf-8')).hexdigest()


def watch_loop(args):
    print(f"üëÄ Watch mode start (interval={args.interval}s, min-gap={args.min_gap}s). Ctrl+C aby zako≈Ñczyƒá.")
    last_status_hash = compute_status_hash()
    last_push_time = time.time() - args.min_gap  # pozwala na push od razu je≈õli zmiany sƒÖ
    stable_cycles = 0
    try:
        while True:
            start = time.time()
            current_hash = compute_status_hash()
            dirty = working_tree_dirty()
            age = last_commit_age_seconds()
            if current_hash != last_status_hash:
                stable_cycles = 0
                print("üìù Wykryto zmiany ‚Äì oczekiwanie na ustabilizowanie...")
                last_status_hash = current_hash
            else:
                if dirty:
                    stable_cycles += 1
                else:
                    stable_cycles = 0

            ready_time = (time.time() - last_push_time) >= args.min_gap
            if dirty and stable_cycles >= 1 and ready_time:
                print("üöÄ Zmiany ustabilizowane ‚Äì pr√≥bujƒô push...")
                pushed, reason = do_single_push(args)
                if pushed:
                    last_push_time = time.time()
                    last_status_hash = compute_status_hash()  # od≈õwie≈º
                    stable_cycles = 0
                else:
                    print(f"‚ö†Ô∏è Push nie wykonany: {reason}")
            elif not dirty and ready_time and age >= args.min_gap:
                # Opcjonalnie: mo≈ºna wymusiƒá push (np. je≈ºeli remote by≈Ç odrzucony wcze≈õniej)
                pass

            elapsed = time.time() - start
            sleep_for = max(1, args.interval - elapsed)
            time.sleep(sleep_for)
    except KeyboardInterrupt:
        print("üëã Watch mode przerwany przez u≈ºytkownika.")
    except Exception as e:
        print("‚ùå B≈ÇƒÖd w watch loop:", e)
        traceback.print_exc()
        return 1
    return 0


def main():
    args = parse_args()
    repo_root = Path(__file__).parent.parent.resolve()
    os.chdir(repo_root)
    if not (repo_root / '.git').exists():
        print('‚ùå Brak repo .git ‚Äì przerwano.')
        return 1

    expected = os.environ.get('EXPECT_REMOTE_SUBSTR')  # np. 'gra_wojenna_2025'
    remotes = sh('git remote -v')
    if expected and expected not in (remotes.stdout or ''):
        print(f"‚ö†Ô∏è Ostrze≈ºenie: remote nie zawiera ciƒÖgu '{expected}'")

    if args.watch:
        return watch_loop(args)
    else:
        # Pojedyncze wywo≈Çanie: zawsze wykonaj push (nawet je≈õli poprzedni commit by≈Ç przed chwilƒÖ)
        pushed, reason = do_single_push(args, min_age_override=0)
        if pushed:
            print("‚úÖ Backup push zako≈Ñczony (tryb jednorazowy)")
        else:
            print(f"‚ÑπÔ∏è Nic do zrobienia: {reason}")
        return 0

if __name__ == '__main__':
    sys.exit(main())
